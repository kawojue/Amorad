datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URI")
}

generator client {
    provider = "prisma-client-js"
}

model Adradospec {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    email      String   @unique
    fullname   String
    superAdmin Boolean  @default(false)
    password   String
    role       Roles
    avatar     File?
    status     Status   @default(ACTIVE)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Center {
    id          String         @id @default(auto()) @map("_id") @db.ObjectId
    centerName  String         @unique
    email       String         @unique
    ip          String
    address     String
    city        String
    state       String
    phone       String
    zip_code    String?
    country     String
    status      Status         @default(PENDING)
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
    patients    Patient[]
    admins      CenterAdmin[]
    practioners Practitioner[]
}

model CenterAdmin {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    superAdmin Boolean  @default(false)
    fullname   String
    password   String
    avatar     File?
    phone      String   @unique
    email      String   @unique
    center     Center   @relation(fields: [centerId], references: [id])
    centerId   String   @unique @db.ObjectId
    role       Roles    @default(centerAdmin)
    status     Status   @default(ACTIVE)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Practitioner {
    id             String         @id @default(auto()) @map("_id") @db.ObjectId
    status         Status         @default(PENDING)
    fullname       String
    avatar         File?
    type           PracType
    email          String         @unique
    phone          String         @unique
    password       String
    affiliation    String?
    practiceNumber String         @unique
    address        String
    city           String
    state          String
    zip_code       String?
    country        String
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    role           Roles
    patientStudies PatientStudy[]
    center         Center?        @relation(fields: [centerId], references: [id])
    centerId       String?        @unique @db.ObjectId
}

model Patient {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    mrn           String         @unique
    fullname      String
    nin           String
    phone         String
    dob           DateTime
    gender        Gender?
    maritalStatus MaritalStatus?
    address       String
    zip_code      String?
    status        PatientStatus  @default(Unassigned)
    dicoms        File[]
    center        Center         @relation(fields: [centerId], references: [id])
    centerId      String         @unique @db.ObjectId
    caseStudies   PatientStudy[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
}

model PatientStudy {
    id             String       @id @default(auto()) @map("_id") @db.ObjectId
    studyId        String       @unique
    bodyPart       String
    priority       String
    cpt_code       String
    modality       String
    procedure      String
    description    String?
    clinicalInfo   String?
    site           String
    accessionNo    String
    paperwork      File[]
    priorStudy     String?
    dicoms         File[]
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    practitioner   Practitioner @relation(fields: [practitionerId], references: [id])
    practitionerId String       @db.ObjectId
    patient        Patient      @relation(fields: [patientId], references: [id])
    patientId      String       @db.ObjectId
}

enum Status {
    ACTIVE
    PENDING
    SUSPENDED
}

enum PatientStatus {
    Closed
    Opened
    Assigned
    Archived
    Unassigned
}

enum Gender {
    Male
    Female
}

enum MaritalStatus {
    Single
    Married
    Widowed
    Divorced
    Seperated
}

enum Roles {
    admin
    doctor
    specialist
    radiologist
    centerAdmin
}

enum PracType {
    center
    system
}

type File {
    idx  String? @default(uuid())
    url  String
    path String
    type String?
}
