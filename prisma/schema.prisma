datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URI")
}

generator client {
    provider = "prisma-client-js"
}

model Adspec {
    id         String   @id @default(uuid())
    email      String   @unique
    fullname   String
    superAdmin Boolean  @default(false)
    password   String
    role       Roles
    avatar     Json?
    status     Status   @default(ACTIVE)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    demographicid String?      @unique @db.Uuid
    demographic   Demographic? @relation(fields: [demographicid], references: [id], onDelete: Cascade)
}

model Demographic {
    id           String        @id @default(uuid())
    ip           String?
    dob          DateTime?
    gender       Gender?
    address      String?
    city         String?
    state        String?
    phone        String?
    zip_code     String?
    country      String?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    patient      Patient?
    adspec       Adspec?
    center       Center?
    centerAdmin  CenterAdmin?
    practitioner Practitioner?

    @@index([phone])
}

model Center {
    id          String         @id @default(uuid())
    centerName  String         @unique
    email       String         @unique
    status      Status         @default(PENDING)
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
    bin         Trash[]
    patients    Patient[]
    admins      CenterAdmin[]
    practioners Practitioner[]
    studies     PatientStudy[]

    demographicid String      @unique @db.Uuid
    demographic   Demographic @relation(fields: [demographicid], references: [id], onDelete: Cascade)
}

model CenterAdmin {
    id         String   @id @default(uuid())
    superAdmin Boolean  @default(false)
    fullname   String
    password   String
    avatar     Json?
    email      String   @unique
    role       Roles    @default(centerAdmin)
    status     Status   @default(ACTIVE)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    centerId      String  @db.Uuid
    demographicid String? @unique @db.Uuid

    demographic Demographic? @relation(fields: [demographicid], references: [id], onDelete: Cascade)
    center      Center       @relation(fields: [centerId], references: [id], onDelete: Cascade)
}

model Practitioner {
    id             String         @id @default(uuid())
    status         Status         @default(PENDING)
    fullname       String
    avatar         Json?
    type           PracType
    email          String         @unique
    password       String
    affiliation    String?
    practiceNumber String         @unique
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    role           Roles
    patientStudies PatientStudy[]

    centerId      String? @db.Uuid
    demographicid String  @unique @db.Uuid

    center      Center?     @relation(fields: [centerId], references: [id], onDelete: Cascade)
    demographic Demographic @relation(fields: [demographicid], references: [id], onDelete: Cascade)

    @@index([fullname, email])
}

model Patient {
    id            String         @id @default(uuid())
    mrn           String         @unique
    fullname      String
    govtId        String?        @unique
    email         String         @unique
    maritalStatus MaritalStatus?
    status        PatientStatus  @default(New)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    caseStudies   PatientStudy[]

    centerId      String @db.Uuid
    demographicid String @unique @db.Uuid

    demographic Demographic @relation(fields: [demographicid], references: [id], onDelete: Cascade)
    center      Center      @relation(fields: [centerId], references: [id], onDelete: Cascade)

    @@index([fullname, email])
}

model PatientStudy {
    id               String       @id @default(uuid())
    study_id         String       @unique
    body_part        String
    priority         Priority
    modality         Modality
    cpt_code         String?
    procedure        String?
    description      String?
    clinical_info    String?
    site             String?
    reporting_status StudyStatus?
    access_code      String?      @unique
    paperwork        Json[]
    dicoms           Json[]
    status           StudyStatus  @default(Unassigned)
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt

    centerId       String  @db.Uuid
    patientId      String  @db.Uuid
    practitionerId String? @db.Uuid

    practitioner Practitioner? @relation(fields: [practitionerId], references: [id], onDelete: Cascade)
    patient      Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
    center       Center        @relation(fields: [centerId], references: [id], onDelete: Cascade)

    @@index([study_id, body_part, clinical_info, access_code, description])
}

model Trash {
    id        String   @id @default(uuid())
    files     Json[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    center   Center @relation(fields: [centerId], references: [id])
    centerId String @db.Uuid
}

enum Status {
    ACTIVE
    PENDING
    SUSPENDED
}

enum PatientStatus {
    New
    Archived
}

enum StudyStatus {
    Opened
    Closed
    Assigned
    Unassigned
}

enum Priority {
    Medium
    Urgent
    Routine
    Extreme
    Critical
}

enum Modality {
    CR
    CT
    MR
    NM
    US
    OT
    XA
    RF
    DX
    MG
    PT
    RG
    OP
    XC
    SC
    IVUS
}

enum Gender {
    Male
    Female
}

enum MaritalStatus {
    Single
    Married
    Widowed
    Divorced
    Seperated
}

enum Roles {
    admin
    doctor
    specialist
    radiologist
    centerAdmin
}

enum PracType {
    center
    system
}

// type File {
//     idx  String? @default(uuid())
//     size Float?
//     url  String
//     path String
//     type String?
// }
