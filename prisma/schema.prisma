datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URI")
}

generator client {
    provider = "prisma-client-js"
}

model Adradospec {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    email      String   @unique
    fullname   String
    superAdmin Boolean  @default(false)
    password   String
    role       Roles
    status     Status   @default(ACTIVE)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Center {
    id          String               @id @default(auto()) @map("_id") @db.ObjectId
    centerName  String               @unique
    email       String               @unique
    ip          String
    address     String
    city        String
    state       String
    phone       String
    zip_code    String?
    country     String
    status      Status               @default(PENDING)
    createdAt   DateTime             @default(now())
    updatedAt   DateTime             @updatedAt
    patients    Patient[]
    admins      CenterAdmin[]
    practioners CenterPractitioner[]
}

model CenterAdmin {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    superAdmin Boolean  @default(false)
    fullname   String
    password   String
    phone      String   @unique
    email      String   @unique
    center     Center   @relation(fields: [centerId], references: [id])
    centerId   String   @unique @db.ObjectId
    role       Roles    @default(centerAdmin)
    status     Status   @default(ACTIVE)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model CenterPractitioner {
    id               String    @id @default(auto()) @map("_id") @db.ObjectId
    fullname         String
    email            String    @unique
    phone            String    @unique
    password         String
    practiceNumber   String
    address          String
    city             String
    state            String
    zip_code         String?
    country          String
    role             Roles
    status           Status    @default(ACTIVE)
    assignedPatients Patient[]
    center           Center    @relation(fields: [centerId], references: [id])
    centerId         String    @unique @db.ObjectId
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
}

model Practitioner {
    id               String    @id @default(auto()) @map("_id") @db.ObjectId
    status           Status    @default(PENDING)
    fullname         String
    email            String    @unique
    phone            String    @unique
    password         String
    affiliation      String
    practiceNumber   String
    address          String
    city             String
    state            String
    zip_code         String?
    country          String
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    role             Roles
    assignedPatients Patient[]
}

model Patient {
    id                   String              @id @default(auto()) @map("_id") @db.ObjectId
    mrn                  String              @unique
    fullname             String
    nin                  String
    phone                String
    dob                  DateTime
    gender               Gender?
    maritalStatus        MaritalStatus?
    address              String
    status               PatientStatus       @default(Unassigned)
    zip_code             String?
    dicoms               File[]
    center               Center              @relation(fields: [centerId], references: [id])
    centerId             String              @unique @db.ObjectId
    practitioner         Practitioner?       @relation(fields: [practitionerId], references: [id])
    practitionerId       String?             @unique @db.ObjectId
    centerPractitioner   CenterPractitioner? @relation(fields: [centerPractitionerId], references: [id])
    centerPractitionerId String?             @unique @db.ObjectId
    createdAt            DateTime            @default(now())
    updatedAt            DateTime            @updatedAt
}

enum Status {
    ACTIVE
    PENDING
    SUSPENDED
}

enum PatientStatus {
    Closed
    Opened
    Assigned
    Archived
    Unassigned
}

enum Gender {
    Male
    Female
}

enum MaritalStatus {
    Single
    Married
    Widowed
    Divorced
    Seperated
}

enum Roles {
    admin
    doctor
    specialist
    radiologist
    centerAdmin
}

type File {
    idx  String? @default(uuid())
    url  String
    path String
    type String?
}
